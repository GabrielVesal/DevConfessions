@model List<Confession>

<div class="confessions-container">
    @if (TempData["ConfessionError"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ConfessionError"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
     @if (TempData["VoteError"] != null)
     {
         <div class="alert alert-warning alert-dismissible fade show" role="alert">
             @TempData["VoteError"]
             <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
         </div>
     }
    
     @if (TempData["VoteSuccess"] != null)
     {
         <div class="alert alert-success alert-dismissible fade show" role="alert">
             @TempData["VoteSuccess"]
             <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
         </div>
     }
    <div class="header text-center mb-5">
        <h1 class="dev-title">
            <i class="bi bi-chat-square-quote"></i> Dev Confessions
        </h1>

        @if (ViewBag.ShowAll)
        {
            <p class="lead">Todas as confissões</p>
            <a href="@Url.Action("Index")" class="btn btn-primary">
                <i class="bi bi-trophy"></i> Top 5
            </a>
        }
        else
        {
            <p class="lead">Top 5 confissões</p>
            <a href="@Url.Action("All")" class="btn btn-primary">
                <i class="bi bi-list-ul"></i> Ver todas
            </a>
        }
    </div>

    <div class="confessions-list">
        @{
            int position = 1;
        }
        @foreach (var confession in Model)
        {
            <div class="confession-card position-relative">
                @if (!ViewBag.ShowAll && position <= 3)
                {
                    <div class="position-ribbon position-@position">
                        @position° lugar
                    </div>
                }

                <div class="confession-content">
                    <div class="confession-header">
                        <div class="author-info">
                            <i class="bi bi-person-circle author-icon"></i>
                            <span class="author-name">@confession.AuthorName&nbsp;&nbsp;-&nbsp;&nbsp;</span><i class="bi bi-clock"></i> @confession.DateCreated.ToString("dd/MM/yy HH:mm")
                        </div>
                    </div>

                    <div class="confession-text mb-3">
                        @confession.Content
                    </div>

                    <div class="hashtags mb-3">
                        @foreach (var tag in confession.Hashtags)
                        {
                            <span class="badge hashtag">@tag</span>
                        }
                    </div>

                    <div class="confession-footer">
                         <div class="votes" id="votes-@confession.Id">
                             <form method="post" action="@Url.Action("Vote")" class="vote-form" data-id="@confession.Id">
                                 <input type="hidden" name="id" value="@confession.Id">
                                 @Html.AntiForgeryToken()
                                 <button type="submit" class="btn btn-sm btn-success">
                                     <i class="bi bi-hand-thumbs-up"></i> <span class="vote-count">@confession.Votes</span>
                                 </button>
                             </form>
                         </div>
                        <a href="@Url.Action("Share", new { id = confession.Id })"
                           class="btn btn-sm btn-outline-secondary">
                            <i class="bi bi-share"></i> Compartilhar
                        </a>
                    </div>
                </div>
            </div>
            position++;
        }
    </div>
    <script>
        document.querySelectorAll('form[action="@Url.Action("Vote")"]').forEach(form => {
            form.addEventListener('submit', function() {
                const button = this.querySelector('button');
                button.disabled = true;
                button.innerHTML = `<i class="bi bi-hand-thumbs-up"></i> Obrigado!`;
            });
        });
                setTimeout(() => {
            document.querySelectorAll('.alert').forEach(alert => {
                alert.remove();
            });
        }, 3000);
        document.querySelectorAll('.vote-form').forEach(form => {
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const confessionId = this.getAttribute('data-id');
        const button = this.querySelector('button');
        const voteCountElement = this.querySelector('.vote-count');
        
        button.disabled = true;
        button.innerHTML = `<i class="bi bi-hand-thumbs-up"></i> Obrigado!`;
        
        fetch(this.action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': this.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: `id=${confessionId}`
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            }
            throw new Error('Network response was not ok.');
        })
        .then(data => {
            if (data.success) {
                voteCountElement.textContent = data.newVoteCount;
                
                // Mostrar mensagem de sucesso
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-success alert-dismissible fade show';
                alertDiv.setAttribute('role', 'alert');
                alertDiv.innerHTML = `
                    Voto registrado!
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                
                const container = document.querySelector('.confessions-container');
                container.insertBefore(alertDiv, container.firstChild);
                
                setTimeout(() => {
                    alertDiv.remove();
                }, 3000);
            } else {
                // Mostrar mensagem de erro
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-warning alert-dismissible fade show';
                alertDiv.setAttribute('role', 'alert');
                alertDiv.innerHTML = `
                    ${data.message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                
                const container = document.querySelector('.confessions-container');
                container.insertBefore(alertDiv, container.firstChild);
                
                setTimeout(() => {
                    alertDiv.remove();
                }, 3000);
                
                button.disabled = false;
                button.innerHTML = `<i class="bi bi-hand-thumbs-up"></i> ${voteCountElement.textContent}`;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            button.disabled = false;
            button.innerHTML = `<i class="bi bi-hand-thumbs-up"></i> ${voteCountElement.textContent}`;
        });
    });
});
    </script>
</div>
